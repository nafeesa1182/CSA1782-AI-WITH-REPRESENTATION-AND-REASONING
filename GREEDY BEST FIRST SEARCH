import heapq

class Graph:
    def __init__(self):
        self.graph = {}
        
    def add_edge(self, start, end, weight):
        if start not in self.graph:
            self.graph[start] = []
        self.graph[start].append((end, weight))
        
def greedy_best_first_search(graph, start, goal, heuristic):
    open_list = [(heuristic[start], start)]
    visited = set()
    
    while open_list:
        _, current = heapq.heappop(open_list)
        
        if current == goal:
            print("Goal node found:", current)
            return
        
        if current in visited:
            continue
        
        visited.add(current)
        print("Visiting node:", current)
        
        if current in graph.graph:
            for neighbor, weight in graph.graph[current]:
                if neighbor not in visited:
                    heapq.heappush(open_list, (heuristic[neighbor], neighbor))
    
    print("Goal node not found!")

# Example graph
graph = Graph()
graph.add_edge('A', 'B', 4)
graph.add_edge('A', 'C', 2)
graph.add_edge('B', 'C', 5)
graph.add_edge('B', 'D', 10)
graph.add_edge('C', 'D', 3)
graph.add_edge('D', 'E', 7)
graph.add_edge('C', 'E', 8)

# Heuristic function (simple estimate of distance to goal)
heuristic = {
    'A': 10,
    'B': 8,
    'C': 5,
    'D': 3,
    'E': 0
}

start_node = 'A'
goal_node = 'E'

print("Greedy Best-First Search:")
greedy_best_first_search(graph, start_node, goal_node, heuristic)
